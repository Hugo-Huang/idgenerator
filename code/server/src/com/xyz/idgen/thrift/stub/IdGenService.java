/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xyz.idgen.thrift.stub;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IdGenService {

  /**
   * **************************************************************************************************
   *  服务接口
   * ***************************************************************************************************
   */
  public interface Iface {

    /**
     * * 函数名称：getId
     * * 函数功能：获取一个指定类型的ID
     * * @author houjixin
     * * @param string caller 调用方的标识
     *  * @param string idName id的类型
     *  * @return ResLong 成功获取到ID时，result值为ThriftRes.SUCCESS，value值为获取到的id，
     *  * 					获取失败时，返回各失败的状态描述如下：
     *  * 					（1）id生成器没有处于工作状态，则result返回ThriftRes.SERVER_UNWORKING，value值为 -1
     *  * 					（2）传入参数错误时，则result返回ThriftRes.PARAMETER_ERROR，value值为 -1
     *  * 					（3）id生成器内部获取不到ID时，例如id生成器与redis之间断开连接，则result返回ThriftRes.INNER_ERROR，value值为 -1
     *  * 					（4）内部发送异常时，则result返回ThriftRes.EXCEPTION，value值为 -1
     * *
     * 
     * @param caller
     * @param idName
     */
    public com.xyz.thrift.datatype.ResLong getId(String caller, String idName) throws org.apache.thrift.TException;

    /**
     * * 函数名称：getStrId
     * * 函数功能：获取一个字符串格式的指定类型的ID，可以使用默认的前缀
     * * @author houjixin
     * * @param string caller 调用方的标识
     *  * @param string idName 	id的类型
     *  * @param bool usePrefix	是否使用默认前缀
     *  * @return thrift_datatype.ResStr 成功获取到ID时，result值为ThriftRes.SUCCESS，value值为获取到的id，
     *  * 					获取失败时，返回各失败的状态描述如下：
     *  * 					（1）id生成器没有处于工作状态，则result返回ThriftRes.SERVER_UNWORKING，value值为null
     *  * 					（2）传入参数错误时，则result返回ThriftRes.PARAMETER_ERROR，value值为 null
     *  * 					（3）id生成器内部获取不到ID时，例如id生成器与redis之间断开连接，则result返回ThriftRes.INNER_ERROR，value值为 null
     *  * 					（4）内部发送异常时，则result返回ThriftRes.EXCEPTION，value值为 null
     * *
     * 
     * @param caller
     * @param idName
     * @param usePrefix
     */
    public com.xyz.thrift.datatype.ResStr getStrId(String caller, String idName, boolean usePrefix) throws org.apache.thrift.TException;

    /**
     * * 函数名称：addNewId
     * * 函数功能：添加一个新的ID
     * * @author houjixin
     * * @param string caller 		调用方的标识，每个模块要调用本模块时都要提供调用方的标识；
     * * @param string newIdInfo		新添加的ID的信息
     *  * @return ResStr 				res中返回操作结果，value中返回字符串
     * *
     * 
     * @param caller
     * @param newIdInfo
     */
    public com.xyz.thrift.datatype.ResBool addNewId(String caller, String newIdInfo) throws org.apache.thrift.TException;

    /**
     * * 函数名称：echo
     * * 函数功能：传递一个字符串给Thrift服务器，服务器把这个字符串原封不动的返回
     * * @author houjixin
     * * @param string caller 		调用方的标识，每个模块要调用本模块时都要提供调用方的标识；
     * * @param string srcStr			传递给Thrift服务器的字符串
     *  * @return ResStr 				res中返回操作结果，value中返回字符串
     * *
     * 
     * @param caller
     * @param srcStr
     */
    public com.xyz.thrift.datatype.ResStr echo(String caller, String srcStr) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getId(String caller, String idName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStrId(String caller, String idName, boolean usePrefix, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addNewId(String caller, String newIdInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echo(String caller, String srcStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.xyz.thrift.datatype.ResLong getId(String caller, String idName) throws org.apache.thrift.TException
    {
      send_getId(caller, idName);
      return recv_getId();
    }

    public void send_getId(String caller, String idName) throws org.apache.thrift.TException
    {
      getId_args args = new getId_args();
      args.setCaller(caller);
      args.setIdName(idName);
      sendBase("getId", args);
    }

    public com.xyz.thrift.datatype.ResLong recv_getId() throws org.apache.thrift.TException
    {
      getId_result result = new getId_result();
      receiveBase(result, "getId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getId failed: unknown result");
    }

    public com.xyz.thrift.datatype.ResStr getStrId(String caller, String idName, boolean usePrefix) throws org.apache.thrift.TException
    {
      send_getStrId(caller, idName, usePrefix);
      return recv_getStrId();
    }

    public void send_getStrId(String caller, String idName, boolean usePrefix) throws org.apache.thrift.TException
    {
      getStrId_args args = new getStrId_args();
      args.setCaller(caller);
      args.setIdName(idName);
      args.setUsePrefix(usePrefix);
      sendBase("getStrId", args);
    }

    public com.xyz.thrift.datatype.ResStr recv_getStrId() throws org.apache.thrift.TException
    {
      getStrId_result result = new getStrId_result();
      receiveBase(result, "getStrId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStrId failed: unknown result");
    }

    public com.xyz.thrift.datatype.ResBool addNewId(String caller, String newIdInfo) throws org.apache.thrift.TException
    {
      send_addNewId(caller, newIdInfo);
      return recv_addNewId();
    }

    public void send_addNewId(String caller, String newIdInfo) throws org.apache.thrift.TException
    {
      addNewId_args args = new addNewId_args();
      args.setCaller(caller);
      args.setNewIdInfo(newIdInfo);
      sendBase("addNewId", args);
    }

    public com.xyz.thrift.datatype.ResBool recv_addNewId() throws org.apache.thrift.TException
    {
      addNewId_result result = new addNewId_result();
      receiveBase(result, "addNewId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addNewId failed: unknown result");
    }

    public com.xyz.thrift.datatype.ResStr echo(String caller, String srcStr) throws org.apache.thrift.TException
    {
      send_echo(caller, srcStr);
      return recv_echo();
    }

    public void send_echo(String caller, String srcStr) throws org.apache.thrift.TException
    {
      echo_args args = new echo_args();
      args.setCaller(caller);
      args.setSrcStr(srcStr);
      sendBase("echo", args);
    }

    public com.xyz.thrift.datatype.ResStr recv_echo() throws org.apache.thrift.TException
    {
      echo_result result = new echo_result();
      receiveBase(result, "echo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getId(String caller, String idName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getId_call method_call = new getId_call(caller, idName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String caller;
      private String idName;
      public getId_call(String caller, String idName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caller = caller;
        this.idName = idName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getId_args args = new getId_args();
        args.setCaller(caller);
        args.setIdName(idName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xyz.thrift.datatype.ResLong getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getId();
      }
    }

    public void getStrId(String caller, String idName, boolean usePrefix, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStrId_call method_call = new getStrId_call(caller, idName, usePrefix, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStrId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String caller;
      private String idName;
      private boolean usePrefix;
      public getStrId_call(String caller, String idName, boolean usePrefix, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caller = caller;
        this.idName = idName;
        this.usePrefix = usePrefix;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStrId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStrId_args args = new getStrId_args();
        args.setCaller(caller);
        args.setIdName(idName);
        args.setUsePrefix(usePrefix);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xyz.thrift.datatype.ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStrId();
      }
    }

    public void addNewId(String caller, String newIdInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNewId_call method_call = new addNewId_call(caller, newIdInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNewId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String caller;
      private String newIdInfo;
      public addNewId_call(String caller, String newIdInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caller = caller;
        this.newIdInfo = newIdInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNewId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNewId_args args = new addNewId_args();
        args.setCaller(caller);
        args.setNewIdInfo(newIdInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xyz.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addNewId();
      }
    }

    public void echo(String caller, String srcStr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echo_call method_call = new echo_call(caller, srcStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String caller;
      private String srcStr;
      public echo_call(String caller, String srcStr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caller = caller;
        this.srcStr = srcStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echo_args args = new echo_args();
        args.setCaller(caller);
        args.setSrcStr(srcStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xyz.thrift.datatype.ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getId", new getId());
      processMap.put("getStrId", new getStrId());
      processMap.put("addNewId", new addNewId());
      processMap.put("echo", new echo());
      return processMap;
    }

    public static class getId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getId_args> {
      public getId() {
        super("getId");
      }

      public getId_args getEmptyArgsInstance() {
        return new getId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getId_result getResult(I iface, getId_args args) throws org.apache.thrift.TException {
        getId_result result = new getId_result();
        result.success = iface.getId(args.caller, args.idName);
        return result;
      }
    }

    public static class getStrId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStrId_args> {
      public getStrId() {
        super("getStrId");
      }

      public getStrId_args getEmptyArgsInstance() {
        return new getStrId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStrId_result getResult(I iface, getStrId_args args) throws org.apache.thrift.TException {
        getStrId_result result = new getStrId_result();
        result.success = iface.getStrId(args.caller, args.idName, args.usePrefix);
        return result;
      }
    }

    public static class addNewId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNewId_args> {
      public addNewId() {
        super("addNewId");
      }

      public addNewId_args getEmptyArgsInstance() {
        return new addNewId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addNewId_result getResult(I iface, addNewId_args args) throws org.apache.thrift.TException {
        addNewId_result result = new addNewId_result();
        result.success = iface.addNewId(args.caller, args.newIdInfo);
        return result;
      }
    }

    public static class echo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo_args> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echo_result getResult(I iface, echo_args args) throws org.apache.thrift.TException {
        echo_result result = new echo_result();
        result.success = iface.echo(args.caller, args.srcStr);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getId", new getId());
      processMap.put("getStrId", new getStrId());
      processMap.put("addNewId", new addNewId());
      processMap.put("echo", new echo());
      return processMap;
    }

    public static class getId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getId_args, com.xyz.thrift.datatype.ResLong> {
      public getId() {
        super("getId");
      }

      public getId_args getEmptyArgsInstance() {
        return new getId_args();
      }

      public AsyncMethodCallback<com.xyz.thrift.datatype.ResLong> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xyz.thrift.datatype.ResLong>() { 
          public void onComplete(com.xyz.thrift.datatype.ResLong o) {
            getId_result result = new getId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getId_result result = new getId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getId_args args, org.apache.thrift.async.AsyncMethodCallback<com.xyz.thrift.datatype.ResLong> resultHandler) throws TException {
        iface.getId(args.caller, args.idName,resultHandler);
      }
    }

    public static class getStrId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStrId_args, com.xyz.thrift.datatype.ResStr> {
      public getStrId() {
        super("getStrId");
      }

      public getStrId_args getEmptyArgsInstance() {
        return new getStrId_args();
      }

      public AsyncMethodCallback<com.xyz.thrift.datatype.ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xyz.thrift.datatype.ResStr>() { 
          public void onComplete(com.xyz.thrift.datatype.ResStr o) {
            getStrId_result result = new getStrId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStrId_result result = new getStrId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStrId_args args, org.apache.thrift.async.AsyncMethodCallback<com.xyz.thrift.datatype.ResStr> resultHandler) throws TException {
        iface.getStrId(args.caller, args.idName, args.usePrefix,resultHandler);
      }
    }

    public static class addNewId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNewId_args, com.xyz.thrift.datatype.ResBool> {
      public addNewId() {
        super("addNewId");
      }

      public addNewId_args getEmptyArgsInstance() {
        return new addNewId_args();
      }

      public AsyncMethodCallback<com.xyz.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xyz.thrift.datatype.ResBool>() { 
          public void onComplete(com.xyz.thrift.datatype.ResBool o) {
            addNewId_result result = new addNewId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addNewId_result result = new addNewId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addNewId_args args, org.apache.thrift.async.AsyncMethodCallback<com.xyz.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.addNewId(args.caller, args.newIdInfo,resultHandler);
      }
    }

    public static class echo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo_args, com.xyz.thrift.datatype.ResStr> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      public AsyncMethodCallback<com.xyz.thrift.datatype.ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xyz.thrift.datatype.ResStr>() { 
          public void onComplete(com.xyz.thrift.datatype.ResStr o) {
            echo_result result = new echo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echo_result result = new echo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echo_args args, org.apache.thrift.async.AsyncMethodCallback<com.xyz.thrift.datatype.ResStr> resultHandler) throws TException {
        iface.echo(args.caller, args.srcStr,resultHandler);
      }
    }

  }

  public static class getId_args implements org.apache.thrift.TBase<getId_args, getId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getId_args");

    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("idName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getId_argsTupleSchemeFactory());
    }

    public String caller; // required
    public String idName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLER((short)1, "caller"),
      ID_NAME((short)2, "idName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLER
            return CALLER;
          case 2: // ID_NAME
            return ID_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_NAME, new org.apache.thrift.meta_data.FieldMetaData("idName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getId_args.class, metaDataMap);
    }

    public getId_args() {
    }

    public getId_args(
      String caller,
      String idName)
    {
      this();
      this.caller = caller;
      this.idName = idName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getId_args(getId_args other) {
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetIdName()) {
        this.idName = other.idName;
      }
    }

    public getId_args deepCopy() {
      return new getId_args(this);
    }

    @Override
    public void clear() {
      this.caller = null;
      this.idName = null;
    }

    public String getCaller() {
      return this.caller;
    }

    public getId_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getIdName() {
      return this.idName;
    }

    public getId_args setIdName(String idName) {
      this.idName = idName;
      return this;
    }

    public void unsetIdName() {
      this.idName = null;
    }

    /** Returns true if field idName is set (has been assigned a value) and false otherwise */
    public boolean isSetIdName() {
      return this.idName != null;
    }

    public void setIdNameIsSet(boolean value) {
      if (!value) {
        this.idName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case ID_NAME:
        if (value == null) {
          unsetIdName();
        } else {
          setIdName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLER:
        return getCaller();

      case ID_NAME:
        return getIdName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALLER:
        return isSetCaller();
      case ID_NAME:
        return isSetIdName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getId_args)
        return this.equals((getId_args)that);
      return false;
    }

    public boolean equals(getId_args that) {
      if (that == null)
        return false;

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_idName = true && this.isSetIdName();
      boolean that_present_idName = true && that.isSetIdName();
      if (this_present_idName || that_present_idName) {
        if (!(this_present_idName && that_present_idName))
          return false;
        if (!this.idName.equals(that.idName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdName()).compareTo(other.isSetIdName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idName, other.idName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getId_args(");
      boolean first = true;

      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idName:");
      if (this.idName == null) {
        sb.append("null");
      } else {
        sb.append(this.idName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getId_argsStandardSchemeFactory implements SchemeFactory {
      public getId_argsStandardScheme getScheme() {
        return new getId_argsStandardScheme();
      }
    }

    private static class getId_argsStandardScheme extends StandardScheme<getId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idName = iprot.readString();
                struct.setIdNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.idName != null) {
          oprot.writeFieldBegin(ID_NAME_FIELD_DESC);
          oprot.writeString(struct.idName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getId_argsTupleSchemeFactory implements SchemeFactory {
      public getId_argsTupleScheme getScheme() {
        return new getId_argsTupleScheme();
      }
    }

    private static class getId_argsTupleScheme extends TupleScheme<getId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaller()) {
          optionals.set(0);
        }
        if (struct.isSetIdName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetIdName()) {
          oprot.writeString(struct.idName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.idName = iprot.readString();
          struct.setIdNameIsSet(true);
        }
      }
    }

  }

  public static class getId_result implements org.apache.thrift.TBase<getId_result, getId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getId_resultTupleSchemeFactory());
    }

    public com.xyz.thrift.datatype.ResLong success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xyz.thrift.datatype.ResLong.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getId_result.class, metaDataMap);
    }

    public getId_result() {
    }

    public getId_result(
      com.xyz.thrift.datatype.ResLong success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getId_result(getId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xyz.thrift.datatype.ResLong(other.success);
      }
    }

    public getId_result deepCopy() {
      return new getId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.xyz.thrift.datatype.ResLong getSuccess() {
      return this.success;
    }

    public getId_result setSuccess(com.xyz.thrift.datatype.ResLong success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xyz.thrift.datatype.ResLong)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getId_result)
        return this.equals((getId_result)that);
      return false;
    }

    public boolean equals(getId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getId_resultStandardSchemeFactory implements SchemeFactory {
      public getId_resultStandardScheme getScheme() {
        return new getId_resultStandardScheme();
      }
    }

    private static class getId_resultStandardScheme extends StandardScheme<getId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xyz.thrift.datatype.ResLong();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getId_resultTupleSchemeFactory implements SchemeFactory {
      public getId_resultTupleScheme getScheme() {
        return new getId_resultTupleScheme();
      }
    }

    private static class getId_resultTupleScheme extends TupleScheme<getId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.xyz.thrift.datatype.ResLong();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStrId_args implements org.apache.thrift.TBase<getStrId_args, getStrId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStrId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrId_args");

    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("idName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USE_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("usePrefix", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrId_argsTupleSchemeFactory());
    }

    public String caller; // required
    public String idName; // required
    public boolean usePrefix; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLER((short)1, "caller"),
      ID_NAME((short)2, "idName"),
      USE_PREFIX((short)3, "usePrefix");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLER
            return CALLER;
          case 2: // ID_NAME
            return ID_NAME;
          case 3: // USE_PREFIX
            return USE_PREFIX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USEPREFIX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_NAME, new org.apache.thrift.meta_data.FieldMetaData("idName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USE_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("usePrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrId_args.class, metaDataMap);
    }

    public getStrId_args() {
    }

    public getStrId_args(
      String caller,
      String idName,
      boolean usePrefix)
    {
      this();
      this.caller = caller;
      this.idName = idName;
      this.usePrefix = usePrefix;
      setUsePrefixIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrId_args(getStrId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetIdName()) {
        this.idName = other.idName;
      }
      this.usePrefix = other.usePrefix;
    }

    public getStrId_args deepCopy() {
      return new getStrId_args(this);
    }

    @Override
    public void clear() {
      this.caller = null;
      this.idName = null;
      setUsePrefixIsSet(false);
      this.usePrefix = false;
    }

    public String getCaller() {
      return this.caller;
    }

    public getStrId_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getIdName() {
      return this.idName;
    }

    public getStrId_args setIdName(String idName) {
      this.idName = idName;
      return this;
    }

    public void unsetIdName() {
      this.idName = null;
    }

    /** Returns true if field idName is set (has been assigned a value) and false otherwise */
    public boolean isSetIdName() {
      return this.idName != null;
    }

    public void setIdNameIsSet(boolean value) {
      if (!value) {
        this.idName = null;
      }
    }

    public boolean isUsePrefix() {
      return this.usePrefix;
    }

    public getStrId_args setUsePrefix(boolean usePrefix) {
      this.usePrefix = usePrefix;
      setUsePrefixIsSet(true);
      return this;
    }

    public void unsetUsePrefix() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEPREFIX_ISSET_ID);
    }

    /** Returns true if field usePrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetUsePrefix() {
      return EncodingUtils.testBit(__isset_bitfield, __USEPREFIX_ISSET_ID);
    }

    public void setUsePrefixIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEPREFIX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case ID_NAME:
        if (value == null) {
          unsetIdName();
        } else {
          setIdName((String)value);
        }
        break;

      case USE_PREFIX:
        if (value == null) {
          unsetUsePrefix();
        } else {
          setUsePrefix((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLER:
        return getCaller();

      case ID_NAME:
        return getIdName();

      case USE_PREFIX:
        return Boolean.valueOf(isUsePrefix());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALLER:
        return isSetCaller();
      case ID_NAME:
        return isSetIdName();
      case USE_PREFIX:
        return isSetUsePrefix();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrId_args)
        return this.equals((getStrId_args)that);
      return false;
    }

    public boolean equals(getStrId_args that) {
      if (that == null)
        return false;

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_idName = true && this.isSetIdName();
      boolean that_present_idName = true && that.isSetIdName();
      if (this_present_idName || that_present_idName) {
        if (!(this_present_idName && that_present_idName))
          return false;
        if (!this.idName.equals(that.idName))
          return false;
      }

      boolean this_present_usePrefix = true;
      boolean that_present_usePrefix = true;
      if (this_present_usePrefix || that_present_usePrefix) {
        if (!(this_present_usePrefix && that_present_usePrefix))
          return false;
        if (this.usePrefix != that.usePrefix)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStrId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdName()).compareTo(other.isSetIdName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idName, other.idName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsePrefix()).compareTo(other.isSetUsePrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsePrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usePrefix, other.usePrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrId_args(");
      boolean first = true;

      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idName:");
      if (this.idName == null) {
        sb.append("null");
      } else {
        sb.append(this.idName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("usePrefix:");
      sb.append(this.usePrefix);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrId_argsStandardSchemeFactory implements SchemeFactory {
      public getStrId_argsStandardScheme getScheme() {
        return new getStrId_argsStandardScheme();
      }
    }

    private static class getStrId_argsStandardScheme extends StandardScheme<getStrId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idName = iprot.readString();
                struct.setIdNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USE_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.usePrefix = iprot.readBool();
                struct.setUsePrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.idName != null) {
          oprot.writeFieldBegin(ID_NAME_FIELD_DESC);
          oprot.writeString(struct.idName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USE_PREFIX_FIELD_DESC);
        oprot.writeBool(struct.usePrefix);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrId_argsTupleSchemeFactory implements SchemeFactory {
      public getStrId_argsTupleScheme getScheme() {
        return new getStrId_argsTupleScheme();
      }
    }

    private static class getStrId_argsTupleScheme extends TupleScheme<getStrId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaller()) {
          optionals.set(0);
        }
        if (struct.isSetIdName()) {
          optionals.set(1);
        }
        if (struct.isSetUsePrefix()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetIdName()) {
          oprot.writeString(struct.idName);
        }
        if (struct.isSetUsePrefix()) {
          oprot.writeBool(struct.usePrefix);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.idName = iprot.readString();
          struct.setIdNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.usePrefix = iprot.readBool();
          struct.setUsePrefixIsSet(true);
        }
      }
    }

  }

  public static class getStrId_result implements org.apache.thrift.TBase<getStrId_result, getStrId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStrId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStrId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStrId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStrId_resultTupleSchemeFactory());
    }

    public com.xyz.thrift.datatype.ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xyz.thrift.datatype.ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStrId_result.class, metaDataMap);
    }

    public getStrId_result() {
    }

    public getStrId_result(
      com.xyz.thrift.datatype.ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStrId_result(getStrId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xyz.thrift.datatype.ResStr(other.success);
      }
    }

    public getStrId_result deepCopy() {
      return new getStrId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.xyz.thrift.datatype.ResStr getSuccess() {
      return this.success;
    }

    public getStrId_result setSuccess(com.xyz.thrift.datatype.ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xyz.thrift.datatype.ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStrId_result)
        return this.equals((getStrId_result)that);
      return false;
    }

    public boolean equals(getStrId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStrId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStrId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStrId_resultStandardSchemeFactory implements SchemeFactory {
      public getStrId_resultStandardScheme getScheme() {
        return new getStrId_resultStandardScheme();
      }
    }

    private static class getStrId_resultStandardScheme extends StandardScheme<getStrId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStrId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xyz.thrift.datatype.ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStrId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStrId_resultTupleSchemeFactory implements SchemeFactory {
      public getStrId_resultTupleScheme getScheme() {
        return new getStrId_resultTupleScheme();
      }
    }

    private static class getStrId_resultTupleScheme extends TupleScheme<getStrId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStrId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStrId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.xyz.thrift.datatype.ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addNewId_args implements org.apache.thrift.TBase<addNewId_args, addNewId_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNewId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewId_args");

    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_ID_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("newIdInfo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNewId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNewId_argsTupleSchemeFactory());
    }

    public String caller; // required
    public String newIdInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLER((short)1, "caller"),
      NEW_ID_INFO((short)2, "newIdInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLER
            return CALLER;
          case 2: // NEW_ID_INFO
            return NEW_ID_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_ID_INFO, new org.apache.thrift.meta_data.FieldMetaData("newIdInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewId_args.class, metaDataMap);
    }

    public addNewId_args() {
    }

    public addNewId_args(
      String caller,
      String newIdInfo)
    {
      this();
      this.caller = caller;
      this.newIdInfo = newIdInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNewId_args(addNewId_args other) {
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetNewIdInfo()) {
        this.newIdInfo = other.newIdInfo;
      }
    }

    public addNewId_args deepCopy() {
      return new addNewId_args(this);
    }

    @Override
    public void clear() {
      this.caller = null;
      this.newIdInfo = null;
    }

    public String getCaller() {
      return this.caller;
    }

    public addNewId_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getNewIdInfo() {
      return this.newIdInfo;
    }

    public addNewId_args setNewIdInfo(String newIdInfo) {
      this.newIdInfo = newIdInfo;
      return this;
    }

    public void unsetNewIdInfo() {
      this.newIdInfo = null;
    }

    /** Returns true if field newIdInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetNewIdInfo() {
      return this.newIdInfo != null;
    }

    public void setNewIdInfoIsSet(boolean value) {
      if (!value) {
        this.newIdInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case NEW_ID_INFO:
        if (value == null) {
          unsetNewIdInfo();
        } else {
          setNewIdInfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLER:
        return getCaller();

      case NEW_ID_INFO:
        return getNewIdInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALLER:
        return isSetCaller();
      case NEW_ID_INFO:
        return isSetNewIdInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNewId_args)
        return this.equals((addNewId_args)that);
      return false;
    }

    public boolean equals(addNewId_args that) {
      if (that == null)
        return false;

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_newIdInfo = true && this.isSetNewIdInfo();
      boolean that_present_newIdInfo = true && that.isSetNewIdInfo();
      if (this_present_newIdInfo || that_present_newIdInfo) {
        if (!(this_present_newIdInfo && that_present_newIdInfo))
          return false;
        if (!this.newIdInfo.equals(that.newIdInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addNewId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewIdInfo()).compareTo(other.isSetNewIdInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewIdInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newIdInfo, other.newIdInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNewId_args(");
      boolean first = true;

      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newIdInfo:");
      if (this.newIdInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.newIdInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNewId_argsStandardSchemeFactory implements SchemeFactory {
      public addNewId_argsStandardScheme getScheme() {
        return new addNewId_argsStandardScheme();
      }
    }

    private static class addNewId_argsStandardScheme extends StandardScheme<addNewId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNewId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_ID_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newIdInfo = iprot.readString();
                struct.setNewIdInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNewId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.newIdInfo != null) {
          oprot.writeFieldBegin(NEW_ID_INFO_FIELD_DESC);
          oprot.writeString(struct.newIdInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNewId_argsTupleSchemeFactory implements SchemeFactory {
      public addNewId_argsTupleScheme getScheme() {
        return new addNewId_argsTupleScheme();
      }
    }

    private static class addNewId_argsTupleScheme extends TupleScheme<addNewId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNewId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaller()) {
          optionals.set(0);
        }
        if (struct.isSetNewIdInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetNewIdInfo()) {
          oprot.writeString(struct.newIdInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNewId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newIdInfo = iprot.readString();
          struct.setNewIdInfoIsSet(true);
        }
      }
    }

  }

  public static class addNewId_result implements org.apache.thrift.TBase<addNewId_result, addNewId_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNewId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNewId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNewId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNewId_resultTupleSchemeFactory());
    }

    public com.xyz.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xyz.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNewId_result.class, metaDataMap);
    }

    public addNewId_result() {
    }

    public addNewId_result(
      com.xyz.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNewId_result(addNewId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xyz.thrift.datatype.ResBool(other.success);
      }
    }

    public addNewId_result deepCopy() {
      return new addNewId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.xyz.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public addNewId_result setSuccess(com.xyz.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xyz.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNewId_result)
        return this.equals((addNewId_result)that);
      return false;
    }

    public boolean equals(addNewId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addNewId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNewId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNewId_resultStandardSchemeFactory implements SchemeFactory {
      public addNewId_resultStandardScheme getScheme() {
        return new addNewId_resultStandardScheme();
      }
    }

    private static class addNewId_resultStandardScheme extends StandardScheme<addNewId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNewId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xyz.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNewId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNewId_resultTupleSchemeFactory implements SchemeFactory {
      public addNewId_resultTupleScheme getScheme() {
        return new addNewId_resultTupleScheme();
      }
    }

    private static class addNewId_resultTupleScheme extends TupleScheme<addNewId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNewId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNewId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.xyz.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echo_args implements org.apache.thrift.TBase<echo_args, echo_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_args");

    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_argsTupleSchemeFactory());
    }

    public String caller; // required
    public String srcStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLER((short)1, "caller"),
      SRC_STR((short)2, "srcStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLER
            return CALLER;
          case 2: // SRC_STR
            return SRC_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_STR, new org.apache.thrift.meta_data.FieldMetaData("srcStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_args.class, metaDataMap);
    }

    public echo_args() {
    }

    public echo_args(
      String caller,
      String srcStr)
    {
      this();
      this.caller = caller;
      this.srcStr = srcStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_args(echo_args other) {
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetSrcStr()) {
        this.srcStr = other.srcStr;
      }
    }

    public echo_args deepCopy() {
      return new echo_args(this);
    }

    @Override
    public void clear() {
      this.caller = null;
      this.srcStr = null;
    }

    public String getCaller() {
      return this.caller;
    }

    public echo_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getSrcStr() {
      return this.srcStr;
    }

    public echo_args setSrcStr(String srcStr) {
      this.srcStr = srcStr;
      return this;
    }

    public void unsetSrcStr() {
      this.srcStr = null;
    }

    /** Returns true if field srcStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcStr() {
      return this.srcStr != null;
    }

    public void setSrcStrIsSet(boolean value) {
      if (!value) {
        this.srcStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case SRC_STR:
        if (value == null) {
          unsetSrcStr();
        } else {
          setSrcStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLER:
        return getCaller();

      case SRC_STR:
        return getSrcStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALLER:
        return isSetCaller();
      case SRC_STR:
        return isSetSrcStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_args)
        return this.equals((echo_args)that);
      return false;
    }

    public boolean equals(echo_args that) {
      if (that == null)
        return false;

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_srcStr = true && this.isSetSrcStr();
      boolean that_present_srcStr = true && that.isSetSrcStr();
      if (this_present_srcStr || that_present_srcStr) {
        if (!(this_present_srcStr && that_present_srcStr))
          return false;
        if (!this.srcStr.equals(that.srcStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(echo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcStr()).compareTo(other.isSetSrcStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcStr, other.srcStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_args(");
      boolean first = true;

      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcStr:");
      if (this.srcStr == null) {
        sb.append("null");
      } else {
        sb.append(this.srcStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_argsStandardSchemeFactory implements SchemeFactory {
      public echo_argsStandardScheme getScheme() {
        return new echo_argsStandardScheme();
      }
    }

    private static class echo_argsStandardScheme extends StandardScheme<echo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcStr = iprot.readString();
                struct.setSrcStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.srcStr != null) {
          oprot.writeFieldBegin(SRC_STR_FIELD_DESC);
          oprot.writeString(struct.srcStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_argsTupleSchemeFactory implements SchemeFactory {
      public echo_argsTupleScheme getScheme() {
        return new echo_argsTupleScheme();
      }
    }

    private static class echo_argsTupleScheme extends TupleScheme<echo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaller()) {
          optionals.set(0);
        }
        if (struct.isSetSrcStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetSrcStr()) {
          oprot.writeString(struct.srcStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srcStr = iprot.readString();
          struct.setSrcStrIsSet(true);
        }
      }
    }

  }

  public static class echo_result implements org.apache.thrift.TBase<echo_result, echo_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_resultTupleSchemeFactory());
    }

    public com.xyz.thrift.datatype.ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xyz.thrift.datatype.ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_result.class, metaDataMap);
    }

    public echo_result() {
    }

    public echo_result(
      com.xyz.thrift.datatype.ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_result(echo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xyz.thrift.datatype.ResStr(other.success);
      }
    }

    public echo_result deepCopy() {
      return new echo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.xyz.thrift.datatype.ResStr getSuccess() {
      return this.success;
    }

    public echo_result setSuccess(com.xyz.thrift.datatype.ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xyz.thrift.datatype.ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_result)
        return this.equals((echo_result)that);
      return false;
    }

    public boolean equals(echo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(echo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_resultStandardSchemeFactory implements SchemeFactory {
      public echo_resultStandardScheme getScheme() {
        return new echo_resultStandardScheme();
      }
    }

    private static class echo_resultStandardScheme extends StandardScheme<echo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xyz.thrift.datatype.ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_resultTupleSchemeFactory implements SchemeFactory {
      public echo_resultTupleScheme getScheme() {
        return new echo_resultTupleScheme();
      }
    }

    private static class echo_resultTupleScheme extends TupleScheme<echo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.xyz.thrift.datatype.ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
